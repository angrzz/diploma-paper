#!/usr/bin/env python
# coding: utf-8

# In[1]:


import os
import io
import glob
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.pipeline import Pipeline


st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", layout="wide")

PATHS = {
    "–ü–∞—Ü–∏–µ–Ω—Ç 1": "patient1_data.csv",
    "–ü–∞—Ü–∏–µ–Ω—Ç 2": "patient2_data.csv",
}
STATIC_PATH  = "static.csv"
DYNAMIC_PATH = "dynamic.csv"

@st.cache_data
def load_data(path):
    df = pd.read_csv(path, skipinitialspace=True)
    df = df[df["parameter"].notna() & (df["parameter"].str.strip() != "")]
    df["time_min"] = pd.to_numeric(df["time_min"], errors="coerce")
    df_piv = df.pivot_table(
        index="time_min",
        columns="parameter",
        values="value",
        aggfunc="mean"
    )
    return df_piv.apply(pd.to_numeric, errors="coerce")

@st.cache_data
def load_static(path):
    return pd.read_csv(path)

@st.cache_data
def load_dynamic(path):
    df = pd.read_csv(path, skipinitialspace=True)
    df = df[df["parameter"].notna() & (df["parameter"].str.strip() != "")]
    df["value"] = pd.to_numeric(df["value"], errors="coerce")
    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Time "HH:MM" ‚Üí –º–∏–Ω—É—Ç—ã
    df["time_min"] = pd.to_timedelta(df["Time"].str.strip() + ":00").dt.total_seconds() / 60
    df_piv = df.pivot_table(
        index="time_min",
        columns="parameter",
        values="value",
        aggfunc="mean"
    )
    return df_piv.apply(pd.to_numeric, errors="coerce")

data1      = load_data(PATHS["–ü–∞—Ü–∏–µ–Ω—Ç 1"])
data2      = load_data(PATHS["–ü–∞—Ü–∏–µ–Ω—Ç 2"])
static_df  = load_static(STATIC_PATH)
dynamic_df = load_dynamic(DYNAMIC_PATH)

st.sidebar.title("–ú–µ–Ω—é")
main = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
    ["–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å", "–ü–∞—Ü–∏–µ–Ω—Ç 1", "–ü–∞—Ü–∏–µ–Ω—Ç 2"]
)

sub = None
if main in ("–ü–∞—Ü–∏–µ–Ω—Ç 1", "–ü–∞—Ü–∏–µ–Ω—Ç 2"):
    st.sidebar.markdown(f"**{main}:**")
    sub = st.sidebar.radio("", ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"])

if main == "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
    st.title("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É")

    st.subheader("–°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    miss = (static_df.isna().mean() * 100).round(2)
    st.write("–î–æ–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
    st.dataframe(miss.rename("missing_%").to_frame(), use_container_width=True)
    st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(static_df.dtypes.rename("dtype").to_frame(), use_container_width=True)
    num_cols = ["Age", "Height", "Weight"]
    st.write("–û–ø–∏—Å–∞–Ω–∏–µ:")
    st.dataframe(static_df[num_cols].describe().round(2), use_container_width=True)
    st.write("–ö–≤–∞–Ω—Ç–∏–ª–∏:")
    st.dataframe(static_df[num_cols].quantile([0.25, 0.5, 0.75]).round(2), use_container_width=True)

    st.subheader("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    miss_d = (dynamic_df.isna().mean() * 100).round(2)
    st.write("–î–æ–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
    st.dataframe(miss_d.rename("missing_%").to_frame(), use_container_width=True)
    st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(dynamic_df.dtypes.rename("dtype").to_frame(), use_container_width=True)
    st.write("–û–ø–∏—Å–∞–Ω–∏–µ (describe):")
    st.dataframe(dynamic_df.describe().T.round(2), use_container_width=True)
    st.write("–ö–≤–∞–Ω—Ç–∏–ª–∏:")
    st.dataframe(
        dynamic_df.quantile([0.25, 0.5, 0.75]).T.rename(
            columns={0.25:"25%",0.5:"50%",0.75:"75%"}
        ).round(2),
        use_container_width=True
    )

    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
    corr_dyn = dynamic_df.corr()
    st.dataframe(corr_dyn, use_container_width=True)

    st.write("**–í—ã–≤–æ–¥**")
    st.write("–°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    constraints_df = pd.DataFrame(
        [
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Age",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "–ß–∏—Å–ª–æ ‚â§ 130",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": (
                    "–Ω–µ—á–∏—Å–ª–æ–≤—ã–µ -> NaN\n"
                    "> 130 -> 91.4"
                ),
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Gender",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "–ö–æ–¥—ã 0 –∏–ª–∏ 1",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–¥—Ä—É–≥–∏–µ –∫–æ–¥—ã -> NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Height",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "0 < —Ä–æ—Å—Ç ‚â§ 250 —Å–º",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": (
                    "‚â§ 0 —Å–º -> NaN\n"
                    "> 250 —Å–º √∑ 10  (–º–º/–¥–º -> —Å–º)"
                ),
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Weight",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "0 < –≤–µ—Å ‚â§ 300 –∫–≥",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": (
                    "‚â§ 0 –∫–≥ -> NaN\n"
                    "> 300 –∫–≥ / 2.20462  (—Ñ—É–Ω—Ç—ã -> –∫–≥)"
                ),
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "ICUType",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "–ö–æ–¥—ã 1 ‚Äì 4",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–¥—Ä—É–≥–∏–µ –∫–æ–¥—ã -> NaN",
            },
        ]
    )
    st.write("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.dataframe(constraints_df, use_container_width=True)
    def dynamic_constraints_table() -> pd.DataFrame:
        rows = [
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "HR",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "20 ‚â§ HR ‚â§ 300",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "RespRate",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "2 ‚â§ RespRate ‚â§ 80",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Temp",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "25 ‚â§ Temp ‚â§ 45 ¬∞C",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": (
                    "80‚Äì120 ¬∞F ‚Üí –ø–µ—Ä–µ–≤–æ–¥ –≤ ¬∞C;\n"
                    "–ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ / —Å—Ä–∞–∑—É\n"
                    "–≤–Ω–µ 25‚Äì45 ¬∞C ‚Üí NaN"
                ),
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "NISysABP / SysABP",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "50 ‚â§ SysABP ‚â§ 300",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "NIDiasABP / DiasABP",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "20 ‚â§ DiasABP ‚â§ 200",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "NIMAP / MAP",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "30 ‚â§ MAP ‚â§ 250",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Glucose",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "1 ‚â§ Glucose ‚â§ 100",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "GCS",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "3 ‚â§ GCS ‚â§ 15",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Üí NaN",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "Urine",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "Urine ‚â• 0",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–∑–Ω–∞—á–µ–Ω–∏—è < 0 ‚Üí 0",
            },
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è ¬´–Ω–æ—Ä–º–æ–π¬ª": "–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º",
                "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏": "–Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí NaN",
            },
        ]
        return pd.DataFrame(rows)
    
    st.dataframe(dynamic_constraints_table(), use_container_width=True)

    st.write(f"–ò—Ç–æ–≥: –ü—Ä–∏–≤–æ–¥–∏–º –∏—Ö –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É –∏ –æ—Ç—Å–µ–∫–∞–µ–º/–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã. –í—Å—ë, —á—Ç–æ –Ω–µ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ NaN, –∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —á–∏—Å—Ç—ã–π –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")


elif main == "–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å":
    st.title("–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å")
    st.write("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏.")

    FEATURES_PATH = "full_feature_table.csv"
    MODEL_PATH    = "mortality_model.pkl"

    @st.cache_data
    def load_features(path):
        return pd.read_csv(path)

    @st.cache_data
    def load_model(path):
        import joblib, os
        return joblib.load(path) if os.path.exists(path) else None

    df_feat = load_features(FEATURES_PATH)
    model   = load_model(MODEL_PATH)

    st.subheader("üìà –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    col1.metric("CV ROC-AUC (5-fold)",  "0.793", "¬± 0.023")
    col2.metric("Test ROC-AUC",        "0.758")
    col3.metric("Test Accuracy",       "0.845")

    st.write("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (–ø–æ—Ä–æ–≥ 0.3):")
    cm_df = pd.DataFrame([[645, 33], [89, 21]],
                         index=["0 ‚Äî –≤—ã–∂–∏–ª", "1 ‚Äî —É–º–µ—Ä"],
                         columns=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 0", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 1"])
    st.dataframe(cm_df, use_container_width=True)


    def hyperparams_explanation() -> pd.DataFrame:
        rows = [
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`n_estimators = 600`",      "–ó–Ω–∞—á–µ–Ω–∏–µ": "600 –¥–µ—Ä–µ–≤—å–µ–≤",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "CV-AUC –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç —Ä–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ‚âà550 ‚Üí 600 ‚Äî –ø–ª–∞—Ç–æ."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`learning_rate = 0.03`",    "–ó–Ω–∞—á–µ–Ω–∏–µ": "–º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ ‚áí –Ω—É–∂–µ–Ω –º–∞–ª—ã–π —à–∞–≥; c 0.1 –±—ã–ª–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`num_leaves = 64`",         "–ó–Ω–∞—á–µ–Ω–∏–µ": "–≥–ª—É–±–∏–Ω–∞ ‚âà 6",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "32 ‚Äî –Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ, 128 ‚Äî –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ; 64 ‚Äî —Å–µ—Ä–µ–¥–∏–Ω–∞."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`test_size = 0.2`",         "–ó–Ω–∞—á–µ–Ω–∏–µ": "20 % –≤ —Ç–µ—Å—Ç",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "‚âà 600 ¬´–Ω–µ–≤–∏–¥–∏–º—ã—Ö¬ª –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, train –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Ö—É–¥–µ–µ—Ç."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`cv_folds = 5`",            "–ó–Ω–∞—á–µ–Ω–∏–µ": "5-fold CV",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–±–∞–ª–∞–Ω—Å: ¬±0.02 AUC –∏ ‚âà 3 –º–∏–Ω –æ–±—É—á–µ–Ω–∏—è."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`class_weight='balanced'`", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–∞–≤—Ç–æ–≤–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å: —Å–º–µ—Ä—Ç–µ–π –≤—Å–µ–≥–æ 15 %."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`random_state = 42`",       "–ó–Ω–∞—á–µ–Ω–∏–µ": "—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "–ø–æ–ª–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "`n_jobs = -1`",             "–ó–Ω–∞—á–µ–Ω–∏–µ": "–≤—Å–µ —è–¥—Ä–∞",
             "–ü–æ—è—Å–Ω–µ–Ω–∏–µ": "—É—Å–∫–æ—Ä—è–µ–º –æ–±—É—á–µ–Ω–∏–µ √ó2‚Äì3 –∑–∞ —Å—á—ë—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏."},
        ]
        return pd.DataFrame(rows)
    
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
    st.table(hyperparams_explanation())


    with st.expander("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–ª–∏–∫–Ω–∏—Ç–µ)"):
        st.markdown("""
**–û—á–∏—Å—Ç–∫–∞ ‚Üí MTGP ‚Üí LightGBM**

* ***–®–∞–≥ 1.*** –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.  
* ***–®–∞–≥ 2.*** –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ **Multi-Task GP** –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç
  –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –≤—ã–¥–∞—ë—Ç –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (œÉ¬≤, ‚Ñì, W, Œ∫).  
* ***–®–∞–≥ 3.*** –°–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ + MTGP-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≥–¥–µ –ø–æ–ª—É—á–∞–µ–º —Ñ–∏—á–∞-–≤–µ–∫—Ç–æ—Ä.  
* ***–®–∞–≥ 4.*** **LightGBM** (600 –¥–µ—Ä–µ–≤—å–µ–≤, class_weight = balanced)  
  –æ–±—É—á–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—è—Ç—å —É–º–µ—Ä—à–∏—Ö –æ—Ç –≤—ã–∂–∏–≤—à–∏—Ö.  

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| 5-fold **ROC-AUC** | **0.793 ¬± 0.023** |
| Test **ROC-AUC**   | **0.758** |
| Test Accuracy      | **0.845** |
| –õ–æ–∂–Ω–æ-–ø–æ–ª–æ–∂–∏—Ç.     | 33 / 678 |
| –õ–æ–∂–Ω–æ-–æ—Ç—Ä–∏—Ü–∞—Ç.     | 89 / 110 |

–¢–æ–ø-—Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤, —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å HR ‚Üî RR,
–Ω–∏–∑–∫–∏–π GCS –∏ –≤–æ–∑—Ä–∞—Å—Ç.
        """)
else:
    data = data1 if main == "–ü–∞—Ü–∏–µ–Ω—Ç 1" else data2

    if sub == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.title(f"üßÆ {main} ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        desc = data.describe().T
        st.dataframe(desc, use_container_width=True)
        st.subheader("üîç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
        for param, row in desc.iterrows():
            st.write(f"- **{param}**: mean={row['mean']:.2f}, œÉ={row['std']:.2f}, min={row['min']:.2f}, max={row['max']:.2f}")
        st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
        corr = data.corr()
        st.dataframe(corr, use_container_width=True)
        st.subheader("üèÖ –¢–æ–ø-5 –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        mask = np.triu(np.ones_like(corr, dtype=bool), k=1)
        top = corr.where(mask).unstack().dropna().sort_values(ascending=False).head(5)
        st.write(top.to_frame("Correlation").reset_index().rename(columns={"level_0":"Param1","level_1":"Param2"}))

    elif sub == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
        st.title(f"üìà {main} ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        params = list(data.columns)
        sel = st.multiselect("–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å", params, default=params)
        for p in sel:
            fig, ax = plt.subplots(figsize=(6,3))
            ax.plot(data.index, data[p], marker="o", linestyle="-", alpha=0.8)
            ax.set_title(p); ax.set_xlabel("–í—Ä–µ–º—è (–º–∏–Ω)"); ax.set_ylabel(p); ax.grid(True)
            st.pyplot(fig)

